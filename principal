'use client'

import { useState } from 'react'
import Image from 'next/image'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { ChevronLeft, ChevronRight, CakeIcon, IceCreamIcon, CandyIcon, ShoppingCart, Menu, Facebook, Twitter, Instagram, Youtube, Upload, CalendarIcon } from 'lucide-react'
import { Badge } from "@/components/ui/badge"
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Switch } from "@/components/ui/switch"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { format } from "date-fns"

type CakeElement = {
  id: string
  type: 'base' | 'frosting' | 'topping' | 'filling'
  name: string
  price: number
  image: string
}

const cakeElements: CakeElement[] = [
  { id: 'b1', type: 'base', name: 'Vanilla Sponge', price: 10, image: 'https://pub-0b53f7d8fd2f4a20b3b4c1c8f9f3f1a5.r2.dev/vanilla-cake.jpg' },
  { id: 'b2', type: 'base', name: 'Chocolate Sponge', price: 12, image: 'https://pub-0b53f7d8fd2f4a20b3b4c1c8f9f3f1a5.r2.dev/chocolate-cake.jpg' },
  { id: 'b3', type: 'base', name: 'Red Velvet', price: 14, image: 'https://pub-0b53f7d8fd2f4a20b3b4c1c8f9f3f1a5.r2.dev/red-velvet-cake.jpg' },
  { id: 'f1', type: 'frosting', name: 'Buttercream', price: 5, image: 'https://pub-0b53f7d8fd2f4a20b3b4c1c8f9f3f1a5.r2.dev/buttercream-frosting.jpg' },
  { id: 'f2', type: 'frosting', name: 'Cream Cheese', price: 6, image: 'https://pub-0b53f7d8fd2f4a20b3b4c1c8f9f3f1a5.r2.dev/cream-cheese-frosting.jpg' },
  { id: 'f3', type: 'frosting', name: 'Chocolate Ganache', price: 7, image: 'https://pub-0b53f7d8fd2f4a20b3b4c1c8f9f3f1a5.r2.dev/chocolate-ganache.jpg' },
  { id: 't1', type: 'topping', name: 'Strawberries', price: 3, image: 'https://pub-0b53f7d8fd2f4a20b3b4c1c8f9f3f1a5.r2.dev/strawberry-topping.jpg' },
  { id: 't2', type: 'topping', name: 'Chocolate Chips', price: 2, image: 'https://pub-0b53f7d8fd2f4a20b3b4c1c8f9f3f1a5.r2.dev/chocolate-chips.jpg' },
  { id: 't3', type: 'topping', name: 'Sprinkles', price: 1, image: 'https://pub-0b53f7d8fd2f4a20b3b4c1c8f9f3f1a5.r2.dev/sprinkles.jpg' },
  { id: 'fl1', type: 'filling', name: 'Strawberry Jam', price: 4, image: 'https://pub-0b53f7d8fd2f4a20b3b4c1c8f9f3f1a5.r2.dev/strawberry-jam.jpg' },
  { id: 'fl2', type: 'filling', name: 'Chocolate Mousse', price: 5, image: 'https://pub-0b53f7d8fd2f4a20b3b4c1c8f9f3f1a5.r2.dev/chocolate-mousse.jpg' },
  { id: 'fl3', type: 'filling', name: 'Lemon Curd', price: 4, image: 'https://pub-0b53f7d8fd2f4a20b3b4c1c8f9f3f1a5.r2.dev/lemon-curd.jpg' },
]

const SimpleCarousel = ({ items, onSelect, selectedItem }: { 
  items: CakeElement[], 
  onSelect: (item: CakeElement) => void, 
  selectedItem?: CakeElement 
}) => {
  const [currentIndex, setCurrentIndex] = useState(0)

  const nextSlide = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % items.length)
  }

  const prevSlide = () => {
    setCurrentIndex((prevIndex) => (prevIndex - 1 + items.length) % items.length)
  }

  const currentItem = items[currentIndex]

  return (
    <div className="relative w-full h-48 bg-white rounded-lg shadow-md overflow-hidden">
      <div className="absolute inset-0 flex items-center justify-center transition-opacity duration-300">
        <Image
          src={currentItem.image}
          alt={currentItem.name}
          fill
          style={{ objectFit: 'cover' }}
        />
      </div>
      <Button
        variant="outline"
        size="icon"
        className="absolute left-2 top-1/2 transform -translate-y-1/2 z-10"
        onClick={prevSlide}
        aria-label="Previous item"
      >
        <ChevronLeft className="h-4 w-4" />
      </Button>
      <Button
        variant="outline"
        size="icon"
        className="absolute right-2 top-1/2 transform -translate-y-1/2 z-10"
        onClick={nextSlide}
        aria-label="Next item"
      >
        <ChevronRight className="h-4 w-4" />
      </Button>
      <div className="absolute bottom-2 left-2 right-2 text-center bg-white bg-opacity-80 rounded-md p-2">
        <p className="text-sm font-medium">{currentItem.name}</p>
        <p className="text-sm text-muted-foreground">${currentItem.price.toFixed(2)}</p>
      </div>
      <Button
        variant={selectedItem?.id === currentItem.id ? "default" : "secondary"}
        className="absolute bottom-2 right-2 z-10"
        onClick={() => onSelect(currentItem)}
      >
        {selectedItem?.id === currentItem.id ? 'Selected' : 'Select'}
      </Button>
    </div>
  )
}

type CartItem = {
  id: string
  name: string
  price: number
  quantity: number
}

export default function CakeBuilder() {
  const [selectedElements, setSelectedElements] = useState<CakeElement[]>([])
  const [cart, setCart] = useState<CartItem[]>([])
  const [isPaymentOpen, setIsPaymentOpen] = useState(false)
  const [hasTwoFillings, setHasTwoFillings] = useState(false)
  const [themeDescription, setThemeDescription] = useState('')
  const [themeImage, setThemeImage] = useState<string | null>(null)
  const [date, setDate] = useState<Date | undefined>(new Date())
  const [isMenuOpen, setIsMenuOpen] = useState(false)

  const addElement = (element: CakeElement) => {
    setSelectedElements(prev => {
      if (element.type === 'filling' && hasTwoFillings) {
        const fillings = prev.filter(e => e.type === 'filling')
        if (fillings.length === 2) {
          return [...prev.filter(e => e.type !== 'filling' || e.id === fillings[1].id), element]
        }
      }
      return [...prev.filter(e => e.type !== element.type), element]
    })
  }

  const addToCart = () => {
    const requiredTypes = ['base', 'frosting', 'topping']
    if (hasTwoFillings) requiredTypes.push('filling')
    
    if (requiredTypes.every(type => selectedElements.some(element => element.type === type))) {
      const newItem: CartItem = {
        id: `cake-${Date.now()}`,
        name: "Custom Cake",
        price: selectedElements.reduce((sum, element) => sum + element.price, 0),
        quantity: 1
      }
      setCart(prev => [...prev, newItem])
      setSelectedElements([])
      setHasTwoFillings(false)
      setThemeDescription('')
      setThemeImage(null)
      setDate(new Date())
    }
  }

  const removeFromCart = (id: string) => {
    setCart(prev => prev.filter(item => item.id !== id))
  }

  const totalPrice = cart.reduce((sum, item) => sum + item.price * item.quantity, 0)

  const getIcon = (type: string) => {
    switch (type) {
      case 'base':
        return <CakeIcon className="mr-2" />
      case 'frosting':
      case 'filling':
        return <IceCreamIcon className="mr-2" />
      case 'topping':
        return <CandyIcon className="mr-2" />
      default:
        return null
    }
  }

  const handlePayment = (event: React.FormEvent) => {
    event.preventDefault()
    // Here you would typically process the payment
    // For this example, we'll just close the dialog and clear the cart
    setIsPaymentOpen(false)
    setCart([])
    alert("Payment processed successfully!")
  }

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onloadend = () => {
        setThemeImage(reader.result as string)
      }
      reader.readAsDataURL(file)
    }
  }

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col">
      <header className="bg-white shadow-md">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Image
              src="/placeholder.svg?height=40&width=40&text=Logo"
              alt="Company Logo"
              width={40}
              height={40}
            />
            <h1 className="text-xl font-bold">Sweet Delights</h1>
          </div>
          <p className="hidden md:block text-sm text-gray-600">Baking dreams into reality</p>
          <Sheet open={isMenuOpen} onOpenChange={setIsMenuOpen}>
            <SheetTrigger asChild>
              <Button variant="outline" size="icon">
                <Menu className="h-6 w-6" />
                <span className="sr-only">Open menu</span>
              </Button>
            </SheetTrigger>
            <SheetContent>
              <SheetHeader>
                <SheetTitle>Menu</SheetTitle>
              </SheetHeader>
              <nav className="mt-4 space-y-4">
                <Button variant="ghost" className="w-full justify-start" onClick={() => setIsMenuOpen(false)}>
                  Login
                </Button>
                <Button variant="ghost" className="w-full justify-start" onClick={() => setIsMenuOpen(false)}>
                  About Us
                </Button>
                <Button variant="ghost" className="w-full justify-start" onClick={() => setIsMenuOpen(false)}>
                  Contact
                </Button>
              </nav>
            </SheetContent>
          </Sheet>
        </div>
      </header>

      <main className="flex-grow container mx-auto px-4 py-8">
        <Card className="w-full max-w-4xl mx-auto">
          <CardHeader className="flex flex-row items-center justify-between">
            <CardTitle className="text-2xl font-bold">Build Your Cake</CardTitle>
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="outline">
                  <ShoppingCart className="mr-2 h-4 w-4" />
                  Cart
                  <Badge variant="secondary" className="ml-2">{cart.length}</Badge>
                </Button>
              </SheetTrigger>
              <SheetContent>
                <SheetHeader>
                  <SheetTitle>Your Cart</SheetTitle>
                </SheetHeader>
                {cart.length > 0 ? (
                  <div className="mt-4 space-y-4">
                    {cart.map(item => (
                      <div key={item.id} className="flex justify-between items-center">
                        <span>{item.name} (x{item.quantity})</span>
                        <div>
                          <span className="mr-2">${(item.price * item.quantity).toFixed(2)}</span>
                          <Button variant="destructive" size="sm" onClick={() => removeFromCart(item.id)}>Remove</Button>
                        </div>
                      </div>
                    ))}
                    <div className="pt-4 border-t">
                      <strong>Total: ${totalPrice.toFixed(2)}</strong>
                    </div>
                    <Button className="w-full" onClick={() => setIsPaymentOpen(true)}>
                      Proceed to Payment
                    </Button>
                  </div>
                ) : (
                  <p className="mt-4">Your cart is empty.</p>
                )}
              </SheetContent>
            </Sheet>
          </CardHeader>
          <CardContent className="grid gap-6">
            <div className="flex items-center space-x-2">
              <Switch
                id="two-fillings"
                checked={hasTwoFillings}
                onCheckedChange={setHasTwoFillings}
              />
              <Label htmlFor="two-fil
lings">Add second filling</Label>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {['base', 'frosting', 'topping', 'filling'].map((type) => (
                <div key={type} className="space-y-2">
                  <h3 className="text-lg font-semibold capitalize">{type}</h3>
                  {(type !== 'filling' || hasTwoFillings) && (
                    <SimpleCarousel
                      items={cakeElements.filter(element => element.type === type)}
                      onSelect={addElement}
                      selectedItem={selectedElements.find(element => element.type === type)}
                    />
                  )}
                  {type === 'filling' && hasTwoFillings && (
                    <SimpleCarousel
                      items={cakeElements.filter(element => element.type === type)}
                      onSelect={addElement}
                      selectedItem={selectedElements.filter(element => element.type === type)[1]}
                    />
                  )}
                </div>
              ))}
            </div>
            <div className="space-y-2">
              <Label htmlFor="theme">Cake Theme Description</Label>
              <Textarea
                id="theme"
                placeholder="Describe your cake theme..."
                value={themeDescription}
                onChange={(e) => setThemeDescription(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label>Theme Image</Label>
              <div className="flex space-x-2">
                <Input type="file" onChange={handleImageUpload} accept="image/*" />
              </div>
            </div>
            {themeImage && (
              <div className="mt-2">
                <Image src={themeImage} alt="Theme" width={200} height={200} className="rounded-md" />
              </div>
            )}
            <div className="space-y-2">
              <Label>Delivery Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant={"outline"}
                    className={`w-[280px] justify-start text-left font-normal ${!date && "text-muted-foreground"}`}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {date ? format(date, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <Calendar
                    mode="single"
                    selected={date}
                    onSelect={setDate}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
            <div className="bg-white p-4 rounded-lg shadow">
              <h3 className="text-lg font-semibold mb-2">Your Cake</h3>
              {selectedElements.length > 0 ? (
                <ul className="space-y-1">
                  {selectedElements.map((element, index) => (
                    <li key={`${element.id}-${index}`} className="flex items-center">
                      {getIcon(element.type)}
                      <span>{element.name} - ${element.price.toFixed(2)}</span>
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="text-gray-500">Start building your cake!</p>
              )}
              {themeDescription && (
                <p className="mt-2"><strong>Theme:</strong> {themeDescription}</p>
              )}
              {date && (
                <p className="mt-2"><strong>Delivery Date:</strong> {format(date, 'PP')}</p>
              )}
            </div>
          </CardContent>
          <CardFooter className="flex flex-col sm:flex-row justify-between items-center gap-4">
            <div className="text-xl font-bold">
              Total: ${selectedElements.reduce((sum, element) => sum + element.price, 0).toFixed(2)}
            </div>
            <div className="flex gap-4">
              <Button size="lg" onClick={addToCart} disabled={selectedElements.length !== (hasTwoFillings ? 4 : 3)}>
                Add to Cart
              </Button>
              <Button size="lg" onClick={() => setIsPaymentOpen(true)} disabled={cart.length === 0}>
                Pay Now
              </Button>
            </div>
          </CardFooter>
        </Card>
      </main>

      <footer className="bg-gray-800 text-white py-8">
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="mb-4 md:mb-0">
              <h2 className="text-xl font-bold">Sweet Delights</h2>
              <p className="text-sm">Baking dreams into reality</p>
            </div>
            <div className="flex space-x-4">
              <a href="#" aria-label="Facebook" className="hover:text-blue-400">
                <Facebook />
              </a>
              <a href="#" aria-label="Twitter" className="hover:text-blue-400">
                <Twitter />
              </a>
              <a href="#" aria-label="Instagram" className="hover:text-pink-400">
                <Instagram />
              </a>
              <a href="#" aria-label="YouTube" className="hover:text-red-500">
                <Youtube />
              </a>
            </div>
          </div>
          <div className="mt-4 text-center text-sm">
            &copy; 2023 Sweet Delights. All rights reserved.
          </div>
        </div>
      </footer>

      <Dialog open={isPaymentOpen} onOpenChange={setIsPaymentOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Payment Details</DialogTitle>
            <DialogDescription>
              Enter your payment information to complete your purchase.
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handlePayment}>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="name" className="text-right">
                  Name
                </Label>
                <Input id="name" className="col-span-3" />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="card" className="text-right">
                  Card Number
                </Label>
                <Input id="card" className="col-span-3" />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="expiry" className="text-right">
                  Expiry Date
                </Label>
                <Input id="expiry" className="col-span-3" />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="cvv" className="text-right">
                  CVV
                </Label>
                <Input id="cvv" className="col-span-3" />
              </div>
            </div>
            <DialogFooter>
              <Button type="submit">Pay ${totalPrice.toFixed(2)}</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  )
}
